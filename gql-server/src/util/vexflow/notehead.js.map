{"version":3,"sources":["../../../node_modules/vexflow/src/notehead.js"],"names":["L","args","NoteHead","DEBUG","Vex","drawSlashNoteHead","ctx","duration","x","y","stem_direction","staveSpace","width","Flow","SLASH_NOTEHEAD_WIDTH","save","setLineWidth","STEM_WIDTH","fill","durationToNumber","beginPath","moveTo","lineTo","closePath","stroke","durationToFraction","equals","breve_lines","i","length","restore","Note","CATEGORY","constructor","head_options","setAttribute","index","note_type","displaced","StaveNote","STEM_UP","line","glyph","getGlyphProps","RuntimeError","glyph_code","code_head","x_shift","custom_glyph_code","custom_glyph","stem_up_x_offset","stem_down_x_offset","style","slashed","Merge","render_options","glyph_font_scale","DEFAULT_NOTATION_FONT_SCALE","stroke_px","setWidth","getWidth","getCategory","isDisplaced","getGlyph","setX","getY","setY","getLine","setLine","getAbsoluteX","preFormatted","displacementStemAdjustment","Stem","WIDTH","fontShift","musicFont","lookupMetric","displacedFontShift","getBoundingBox","RERR","spacing","stave","getSpacingBetweenLines","half_spacing","min_y","BoundingBox","setStave","getYForNote","context","preFormat","leftDisplacedHeadPx","rightDisplacedHeadPx","setPreFormatted","draw","checkContext","setRendered","head_x","UP","applyStyle","categorySuffix","Glyph","renderGlyph","font","category","restoreStyle"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated\n// directly, but used internally in `StaveNote`.\n//\n// See `tests/notehead_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.\nfunction L(...args) { if (NoteHead.DEBUG) Vex.L('Vex.Flow.NoteHead', args); }\n\n// Draw slashnote head manually. No glyph exists for this.\n//\n// Parameters:\n// * `ctx`: the Canvas context\n// * `duration`: the duration of the note. ex: \"4\"\n// * `x`: the x coordinate to draw at\n// * `y`: the y coordinate to draw at\n// * `stem_direction`: the direction of the stem\nfunction drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {\n  const width = Flow.SLASH_NOTEHEAD_WIDTH;\n  ctx.save();\n  ctx.setLineWidth(Flow.STEM_WIDTH);\n\n  let fill = false;\n\n  if (Flow.durationToNumber(duration) > 2) {\n    fill = true;\n  }\n\n  if (!fill) x -= (Flow.STEM_WIDTH / 2) * stem_direction;\n\n  ctx.beginPath();\n  ctx.moveTo(x, y + staveSpace);\n  ctx.lineTo(x, y + 1);\n  ctx.lineTo(x + width, y - staveSpace);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x, y + staveSpace);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n\n  if (Flow.durationToFraction(duration).equals(0.5)) {\n    const breve_lines = [-3, -1, width + 1, width + 3];\n    for (let i = 0; i < breve_lines.length; i++) {\n      ctx.beginPath();\n      ctx.moveTo(x + breve_lines[i], y - 10);\n      ctx.lineTo(x + breve_lines[i], y + 11);\n      ctx.stroke();\n    }\n  }\n\n  ctx.restore();\n}\n\nexport class NoteHead extends Note {\n  static get CATEGORY() { return 'notehead'; }\n\n  constructor(head_options) {\n    super(head_options);\n    this.setAttribute('type', 'NoteHead');\n\n    this.index = head_options.index;\n    this.x = head_options.x || 0;\n    this.y = head_options.y || 0;\n    this.note_type = head_options.note_type;\n    this.duration = head_options.duration;\n    this.displaced = head_options.displaced || false;\n    this.stem_direction = head_options.stem_direction || StaveNote.STEM_UP;\n    this.line = head_options.line;\n\n    // Get glyph code based on duration and note type. This could be\n    // regular notes, rests, or other custom codes.\n    this.glyph = Flow.getGlyphProps(this.duration, this.note_type);\n    if (!this.glyph) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        `No glyph found for duration '${this.duration}' and type '${this.note_type}'`);\n    }\n\n    this.glyph_code = this.glyph.code_head;\n    this.x_shift = head_options.x_shift || 0;\n    if (head_options.custom_glyph_code) {\n      this.custom_glyph = true;\n      this.glyph_code = head_options.custom_glyph_code;\n      this.stem_up_x_offset = head_options.stem_up_x_offset || 0;\n      this.stem_down_x_offset = head_options.stem_down_x_offset || 0;\n    }\n\n    this.style = head_options.style;\n    this.slashed = head_options.slashed;\n\n    Vex.Merge(this.render_options, {\n      // font size for note heads\n      glyph_font_scale: head_options.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: 3,\n    });\n\n    this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\n  }\n\n  getCategory() { return NoteHead.CATEGORY; }\n\n  // Get the width of the notehead\n  getWidth() { return this.width; }\n\n  // Determine if the notehead is displaced\n  isDisplaced() { return this.displaced === true; }\n\n  // Get the glyph data\n  getGlyph() { return this.glyph; }\n\n  // Set the X coordinate\n  setX(x) { this.x = x; return this; }\n\n  // get/set the Y coordinate\n  getY() { return this.y; }\n  setY(y) { this.y = y;  return this; }\n\n  // Get/set the stave line the notehead is placed on\n  getLine() { return this.line; }\n  setLine(line) { this.line = line; return this; }\n\n  // Get the canvas `x` coordinate position of the notehead.\n  getAbsoluteX() {\n    // If the note has not been preformatted, then get the static x value\n    // Otherwise, it's been formatted and we should use it's x value relative\n    // to its tick context\n    const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n\n    // For a more natural displaced notehead, we adjust the displacement amount\n    // by half the stem width in order to maintain a slight overlap with the stem\n    const displacementStemAdjustment = (Stem.WIDTH / 2);\n    const fontShift = this.musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n    const displacedFontShift = this.musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\n\n    return x + fontShift + (this.displaced\n      ? ((this.width - displacementStemAdjustment) * this.stem_direction) + displacedFontShift\n      : 0\n    );\n  }\n\n  // Get the `BoundingBox` for the `NoteHead`\n  getBoundingBox() {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const spacing = this.stave.getSpacingBetweenLines();\n    const half_spacing = spacing / 2;\n    const min_y = this.y - half_spacing;\n\n    return new Flow.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n  }\n\n  // Set notehead to a provided `stave`\n  setStave(stave) {\n    const line = this.getLine();\n\n    this.stave = stave;\n    this.setY(stave.getYForNote(line));\n    this.context = this.stave.context;\n    return this;\n  }\n\n  // Pre-render formatting\n  preFormat() {\n    if (this.preFormatted) return this;\n\n    const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Draw the notehead\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const ctx = this.context;\n    let head_x = this.getAbsoluteX();\n    if (this.custom_glyph) {\n      // head_x += this.x_shift;\n      head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\n    }\n\n    const y = this.y;\n\n    L(\"Drawing note head '\", this.note_type, this.duration, \"' at\", head_x, y);\n\n    // Begin and end positions for head.\n    const stem_direction = this.stem_direction;\n    const glyph_font_scale = this.render_options.glyph_font_scale;\n\n    if (this.style) {\n      this.applyStyle(ctx);\n    }\n\n    const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n    if (this.note_type === 's') {\n      const staveSpace = this.stave.getSpacingBetweenLines();\n      drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n    } else {\n      Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n        font: this.musicFont,\n        category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`\n      });\n    }\n\n    if (this.style) {\n      this.restoreStyle(ctx);\n    }\n  }\n}\n"],"file":"notehead.js"}