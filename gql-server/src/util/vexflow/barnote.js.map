{"version":3,"sources":["../../../node_modules/vexflow/src/barnote.js"],"names":["L","args","BarNote","DEBUG","Vex","Note","constructor","type","Barline","SINGLE","duration","setAttribute","metrics","widths","TYPE","DOUBLE","END","REPEAT_BEGIN","REPEAT_END","REPEAT_BOTH","NONE","ignore_ticks","setType","getType","typeString","setWidth","getBoundingBox","addToModifierContext","preFormat","setPreFormatted","draw","checkContext","stave","RERR","getAbsoluteX","barline","setX","setRendered"],"mappings":";;;;;;;AAUA;;AACA;;AACA;;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA,SAASA,CAAT,CAAW,GAAGC,IAAd,EAAoB;AAAE,MAAIC,OAAO,CAACC,KAAZ,EAAmBC,SAAIJ,CAAJ,CAAM,kBAAN,EAA0BC,IAA1B;AAAkC;;AAEpE,MAAMC,OAAN,SAAsBG,UAAtB,CAA2B;AAChCC,EAAAA,WAAW,CAACC,IAAI,GAAGC,sBAAQD,IAAR,CAAaE,MAArB,EAA6B;AACtC,UAAM;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAN;AACA,SAAKC,YAAL,CAAkB,MAAlB,EAA0B,SAA1B;AAEA,SAAKC,OAAL,GAAe;AACbC,MAAAA,MAAM,EAAE;AADK,KAAf;AAIA,UAAMC,IAAI,GAAGN,sBAAQD,IAArB;AACA,SAAKK,OAAL,CAAaC,MAAb,GAAsB;AACpB,OAACC,IAAI,CAACL,MAAN,GAAe,CADK;AAEpB,OAACK,IAAI,CAACC,MAAN,GAAe,EAFK;AAGpB,OAACD,IAAI,CAACE,GAAN,GAAY,EAHQ;AAIpB,OAACF,IAAI,CAACG,YAAN,GAAqB,EAJD;AAKpB,OAACH,IAAI,CAACI,UAAN,GAAmB,EALC;AAMpB,OAACJ,IAAI,CAACK,WAAN,GAAoB,EANA;AAOpB,OAACL,IAAI,CAACM,IAAN,GAAa;AAPO,KAAtB,CATsC,CAmBtC;;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,OAAL,CAAaf,IAAb;AACD,GAvB+B,CAyBhC;;;AACAgB,EAAAA,OAAO,GAAG;AAAE,WAAO,KAAKhB,IAAZ;AAAmB;;AAC/Be,EAAAA,OAAO,CAACf,IAAD,EAAO;AACZ,SAAKA,IAAL,GAAY,OAAOA,IAAP,KAAiB,QAAjB,GACRC,sBAAQgB,UAAR,CAAmBjB,IAAnB,CADQ,GAERA,IAFJ,CADY,CAKZ;;AACA,SAAKkB,QAAL,CAAc,KAAKb,OAAL,CAAaC,MAAb,CAAoB,KAAKN,IAAzB,CAAd;AACA,WAAO,IAAP;AACD;;AAEDmB,EAAAA,cAAc,GAAG;AACf,WAAO,MAAMA,cAAN,EAAP;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV;AACA,SAAKC,eAAL,CAAqB,IAArB;AACA,WAAO,IAAP;AACD,GAlD+B,CAoDhC;;;AACAC,EAAAA,IAAI,GAAG;AACL,SAAKC,YAAL;AACA,QAAI,CAAC,KAAKC,KAAV,EAAiB,MAAM,IAAI5B,SAAI6B,IAAR,CAAa,SAAb,EAAwB,6BAAxB,CAAN;AACjBjC,IAAAA,CAAC,CAAC,yBAAD,EAA4B,KAAKkC,YAAL,EAA5B,CAAD;AACA,UAAMC,OAAO,GAAG,IAAI3B,qBAAJ,CAAY,KAAKD,IAAjB,CAAhB;AACA4B,IAAAA,OAAO,CAACC,IAAR,CAAa,KAAKF,YAAL,EAAb;AACAC,IAAAA,OAAO,CAACL,IAAR,CAAa,KAAKE,KAAlB;AACA,SAAKK,WAAL;AACD;;AA7D+B;;QAArBnC,O,GAAAA,O","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can\n// be added to a voice and rendered in the middle of a stave. Since it has no\n// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n//\n// See `tests/barnote_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Barline } from './stavebarline';\n\n// To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.\nfunction L(...args) { if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', args); }\n\nexport class BarNote extends Note {\n  constructor(type = Barline.type.SINGLE) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'BarNote');\n\n    this.metrics = {\n      widths: {},\n    };\n\n    const TYPE = Barline.type;\n    this.metrics.widths = {\n      [TYPE.SINGLE]: 8,\n      [TYPE.DOUBLE]: 12,\n      [TYPE.END]: 15,\n      [TYPE.REPEAT_BEGIN]: 14,\n      [TYPE.REPEAT_END]: 14,\n      [TYPE.REPEAT_BOTH]: 18,\n      [TYPE.NONE]: 0,\n    };\n\n    // Tell the formatter that bar notes have no duration.\n    this.ignore_ticks = true;\n    this.setType(type);\n  }\n\n  // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.\n  getType() { return this.type; }\n  setType(type) {\n    this.type = typeof(type) === 'string'\n      ? Barline.typeString[type]\n      : type;\n\n    // Set width to width of relevant `Barline`.\n    this.setWidth(this.metrics.widths[this.type]);\n    return this;\n  }\n\n  getBoundingBox() {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat() {\n    /* overridden to ignore */\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Render note to stave.\n  draw() {\n    this.checkContext();\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n    L('Rendering bar line at: ', this.getAbsoluteX());\n    const barline = new Barline(this.type);\n    barline.setX(this.getAbsoluteX());\n    barline.draw(this.stave);\n    this.setRendered();\n  }\n}\n"],"file":"barnote.js"}