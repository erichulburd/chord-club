{"version":3,"sources":["../../../node_modules/vexflow/src/ghostnote.js"],"names":["GhostNote","StemmableNote","constructor","parameter","Vex","RuntimeError","note_struct","duration","setAttribute","setWidth","isRest","setStave","stave","addToModifierContext","preFormat","setPreFormatted","draw","RERR","setRendered","i","modifiers","length","modifier","setContext","context","drawWithStyle"],"mappings":";;;;;;;AAIA;;AACA;;AALA;AACA;AACA;AAKO,MAAMA,SAAN,SAAwBC,4BAAxB,CAAsC;AAC3C;AACAC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB;AACA,QAAI,CAACA,SAAL,EAAgB;AACd,YAAM,IAAIC,SAAIC,YAAR,CAAqB,cAArB,EACJ,gEACA,WAFI,CAAN;AAGD;;AAED,QAAIC,WAAJ,CARqB,CAUrB;;AACA,QAAI,OAAQH,SAAR,KAAuB,QAA3B,EAAqC;AACnCG,MAAAA,WAAW,GAAG;AAAEC,QAAAA,QAAQ,EAAEJ;AAAZ,OAAd;AACD,KAFD,MAEO,IAAI,OAAQA,SAAR,KAAuB,QAA3B,EAAqC;AAC1CG,MAAAA,WAAW,GAAGH,SAAd;AACD,KAFM,MAEA;AACL,YAAM,IAAIC,SAAIC,YAAR,CAAqB,cAArB,EACJ,gEACA,WAFI,CAAN;AAGD;;AAED,UAAMC,WAAN;AACA,SAAKE,YAAL,CAAkB,MAAlB,EAA0B,WAA1B,EAtBqB,CAwBrB;;AACA,SAAKC,QAAL,CAAc,CAAd;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAE,WAAO,IAAP;AAAc;;AAEzBC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,UAAMD,QAAN,CAAeC,KAAf;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AAAE;AAA+B,WAAO,IAAP;AAAc;;AAEtEC,EAAAA,SAAS,GAAG;AACV,SAAKC,eAAL,CAAqB,IAArB;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,QAAI,CAAC,KAAKJ,KAAV,EAAiB,MAAM,IAAIR,SAAIa,IAAR,CAAa,SAAb,EAAwB,6BAAxB,CAAN,CADZ,CAGL;;AACA,SAAKC,WAAL;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,SAAL,CAAeC,MAAnC,EAA2C,EAAEF,CAA7C,EAAgD;AAC9C,YAAMG,QAAQ,GAAG,KAAKF,SAAL,CAAeD,CAAf,CAAjB;AACAG,MAAAA,QAAQ,CAACC,UAAT,CAAoB,KAAKC,OAAzB;AACAF,MAAAA,QAAQ,CAACG,aAAT;AACD;AACF;;AArD0C;;QAAhCzB,S,GAAAA,S","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n\nimport { Vex } from './vex';\nimport { StemmableNote } from './stemmablenote';\n\nexport class GhostNote extends StemmableNote {\n  /** @constructor */\n  constructor(parameter) {\n    // Sanity check\n    if (!parameter) {\n      throw new Vex.RuntimeError('BadArguments',\n        'Ghost note must have valid initialization data to identify ' +\n        'duration.');\n    }\n\n    let note_struct;\n\n    // Preserve backwards-compatibility\n    if (typeof (parameter) === 'string') {\n      note_struct = { duration: parameter };\n    } else if (typeof (parameter) === 'object') {\n      note_struct = parameter;\n    } else {\n      throw new Vex.RuntimeError('BadArguments',\n        'Ghost note must have valid initialization data to identify ' +\n        'duration.');\n    }\n\n    super(note_struct);\n    this.setAttribute('type', 'GhostNote');\n\n    // Note properties\n    this.setWidth(0);\n  }\n\n  isRest() { return true; }\n\n  setStave(stave) {\n    super.setStave(stave);\n  }\n\n  addToModifierContext() { /* intentionally overridden */ return this; }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    // Draw the modifiers\n    this.setRendered();\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(this.context);\n      modifier.drawWithStyle();\n    }\n  }\n}\n"],"file":"ghostnote.js"}