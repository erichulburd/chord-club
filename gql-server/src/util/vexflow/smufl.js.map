{"version":3,"sources":["../../../node_modules/vexflow/src/smufl.js"],"names":["Font","constructor","name","metrics","fontData","codePoints","getName","getResolution","resolution","getMetrics","lookupMetric","key","defaultValue","undefined","parts","split","val","i","length","Vex","RERR","getFontData","getGlyphs","glyphs","getCodePoints","setCodePoints","Fonts","Bravura","BravuraMetrics","BravuraFont","Gonville","GonvilleMetrics","GonvilleFont","Petaluma","PetalumaMetrics","PetalumaFont","Custom","CustomMetrics","CustomFont","DefaultFontStack"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,EAA0B;AACnC,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKJ,IAAZ;AACD;;AAEDK,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKH,QAAL,CAAcI,UAArB;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKN,OAAZ;AACD;;AAEDO,EAAAA,YAAY,CAACC,GAAD,EAAMC,YAAY,GAAGC,SAArB,EAAgC;AAC1C,UAAMC,KAAK,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,CAAd;AACA,QAAIC,GAAG,GAAG,KAAKb,OAAf,CAF0C,CAG1C;;AACA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAID,GAAG,CAACF,KAAK,CAACG,CAAD,CAAN,CAAH,KAAkBJ,SAAtB,EAAiC;AAC/B,YAAID,YAAY,KAAKC,SAArB,EAAgC;AAC9B,iBAAOD,YAAP;AACD,SAFD,MAEO;AACL,gBAAM,IAAIO,SAAIC,IAAR,CAAa,aAAb,EAA6B,kCAAiCT,GAAI,EAAlE,CAAN;AACD;AACF;;AACDK,MAAAA,GAAG,GAAGA,GAAG,CAACF,KAAK,CAACG,CAAD,CAAN,CAAT;AACD,KAbyC,CAe1C;;;AACA,WAAOD,GAAP;AACD;;AAEDK,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKjB,QAAZ;AACD;;AAEDkB,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKlB,QAAL,CAAcmB,MAArB;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKnB,UAAZ;AACD;;AAEDoB,EAAAA,aAAa,CAACpB,UAAD,EAAa;AACxB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,WAAO,IAAP;AACD;;AAtDQ;;AAyDX,MAAMqB,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE,IAAI3B,IAAJ,CAAS,SAAT,EAAoB4B,+BAApB,EAAoCC,2BAApC,CADG;AAEZC,EAAAA,QAAQ,EAAE,IAAI9B,IAAJ,CAAS,UAAT,EAAqB+B,iCAArB,EAAsCC,6BAAtC,CAFE;AAGZC,EAAAA,QAAQ,EAAE,IAAIjC,IAAJ,CAAS,UAAT,EAAqBkC,iCAArB,EAAsCC,6BAAtC,CAHE;AAIZC,EAAAA,MAAM,EAAE,IAAIpC,IAAJ,CAAS,QAAT,EAAmBqC,6BAAnB,EAAkCC,yBAAlC;AAJI,CAAd;AAOA,MAAMC,gBAAgB,GAAG,CAACb,KAAK,CAACC,OAAP,EAAgBD,KAAK,CAACI,QAAtB,EAAgCJ,KAAK,CAACU,MAAtC,CAAzB;QAESV,K,GAAAA,K;QAAOa,gB,GAAAA,gB;QAAkBvC,I,GAAAA,I","sourcesContent":["import { Vex } from './vex';\nimport { BravuraFont } from './fonts/bravura_glyphs';\nimport { BravuraMetrics } from './fonts/bravura_metrics';\nimport { GonvilleFont  } from './fonts/gonville_glyphs';\nimport { GonvilleMetrics } from './fonts/gonville_metrics';\nimport { PetalumaFont  } from './fonts/petaluma_glyphs';\nimport { PetalumaMetrics } from './fonts/petaluma_metrics';\nimport { CustomFont  } from './fonts/custom_glyphs';\nimport { CustomMetrics  } from './fonts/custom_metrics';\n\nclass Font {\n  constructor(name, metrics, fontData) {\n    this.name = name;\n    this.metrics = metrics;\n    this.fontData = fontData;\n    this.codePoints = {};\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getResolution() {\n    return this.fontData.resolution;\n  }\n\n  getMetrics() {\n    return this.metrics;\n  }\n\n  lookupMetric(key, defaultValue = undefined) {\n    const parts = key.split('.');\n    let val = this.metrics;\n    // console.log('lookupMetric:', key);\n    for (let i = 0; i < parts.length; i++) {\n      if (val[parts[i]] === undefined) {\n        if (defaultValue !== undefined) {\n          return defaultValue;\n        } else {\n          throw new Vex.RERR('INVALID_KEY', `Invalid music font metric key: ${key}`);\n        }\n      }\n      val = val[parts[i]];\n    }\n\n    // console.log('found:', key, val);\n    return val;\n  }\n\n  getFontData() {\n    return this.fontData;\n  }\n\n  getGlyphs() {\n    return this.fontData.glyphs;\n  }\n\n  getCodePoints() {\n    return this.codePoints;\n  }\n\n  setCodePoints(codePoints) {\n    this.codePoints = codePoints;\n    return this;\n  }\n}\n\nconst Fonts = {\n  Bravura: new Font('Bravura', BravuraMetrics, BravuraFont),\n  Gonville: new Font('Gonville', GonvilleMetrics, GonvilleFont),\n  Petaluma: new Font('Petaluma', PetalumaMetrics, PetalumaFont),\n  Custom: new Font('Custom', CustomMetrics, CustomFont),\n};\n\nconst DefaultFontStack = [Fonts.Bravura, Fonts.Gonville, Fonts.Custom];\n\nexport { Fonts, DefaultFontStack, Font };\n"],"file":"smufl.js"}