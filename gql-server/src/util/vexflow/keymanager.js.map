{"version":3,"sources":["../../../node_modules/vexflow/src/keymanager.js"],"names":["KeyManager","constructor","key","music","Music","setKey","reset","getKey","keyParts","getKeyParts","keyString","root","accidental","is_supported_type","scaleTypes","type","Vex","RERR","scale","getScaleTones","getNoteValue","scaleMap","scaleMapByValue","originalScaleMapByValue","noteLocation","root_indices","i","roots","length","index","rootName","noteName","getRelativeNoteName","getAccidental","parts","getNoteParts","note","selectNote","toLowerCase","scaleNote","modparts","valueNote","originalValueNote"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\n\nimport { Vex } from './vex';\nimport { Music } from './music';\n\nexport class KeyManager {\n  constructor(key) {\n    this.music = new Music();\n    this.setKey(key);\n  }\n\n  setKey(key) {\n    this.key = key;\n    this.reset();\n    return this;\n  }\n\n  getKey() { return this.key; }\n\n  reset() {\n    this.keyParts = this.music.getKeyParts(this.key);\n\n    this.keyString = this.keyParts.root;\n    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n    const is_supported_type = Music.scaleTypes[this.keyParts.type];\n    if (!is_supported_type) {\n      throw new Vex.RERR('BadArguments', `Unsupported key type: ${this.key}`);\n    }\n\n    this.scale = this.music.getScaleTones(\n      this.music.getNoteValue(this.keyString),\n      Music.scaleTypes[this.keyParts.type]\n    );\n\n    this.scaleMap = {};\n    this.scaleMapByValue = {};\n    this.originalScaleMapByValue = {};\n\n    const noteLocation = Music.root_indices[this.keyParts.root];\n\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n\n      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n      this.scaleMap[rootName] = noteName;\n      this.scaleMapByValue[this.scale[i]] = noteName;\n      this.originalScaleMapByValue[this.scale[i]] = noteName;\n    }\n\n    return this;\n  }\n\n  getAccidental(key) {\n    const root = this.music.getKeyParts(key).root;\n    const parts = this.music.getNoteParts(this.scaleMap[root]);\n\n    return {\n      note: this.scaleMap[root],\n      accidental: parts.accidental,\n    };\n  }\n\n  selectNote(note) {\n    note = note.toLowerCase();\n    const parts = this.music.getNoteParts(note);\n\n    // First look for matching note in our altered scale\n    const scaleNote = this.scaleMap[parts.root];\n    const modparts = this.music.getNoteParts(scaleNote);\n\n    if (scaleNote === note) {\n      return {\n        'note': scaleNote,\n        'accidental': parts.accidental,\n        'change': false,\n      };\n    }\n\n    // Then search for a note of equivalent value in our altered scale\n    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n    if (valueNote != null) {\n      return {\n        'note': valueNote,\n        'accidental': this.music.getNoteParts(valueNote).accidental,\n        'change': false,\n      };\n    }\n\n    // Then search for a note of equivalent value in the original scale\n    const originalValueNote = this.originalScaleMapByValue[\n      this.music.getNoteValue(note)];\n    if (originalValueNote != null) {\n      this.scaleMap[modparts.root] = originalValueNote;\n      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n      return {\n        'note': originalValueNote,\n        'accidental': this.music.getNoteParts(originalValueNote).accidental,\n        'change': true,\n      };\n    }\n\n    // Then try to unmodify a currently modified note.\n    if (modparts.root === note) {\n      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] =  modparts.root;\n      this.scaleMap[modparts.root] = modparts.root;\n      return {\n        'note': modparts.root,\n        'accidental': null,\n        'change': true,\n      };\n    }\n\n    // Last resort -- shitshoot\n    delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n    this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n    delete this.scaleMap[modparts.root];\n    this.scaleMap[modparts.root] = note;\n\n    return {\n      note,\n      'accidental': parts.accidental,\n      'change': true,\n    };\n  }\n}\n"],"file":"keymanager.js"}