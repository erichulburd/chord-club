{"version":3,"sources":["../../../node_modules/vexflow/src/clefnote.js"],"names":["ClefNote","Note","CATEGORY","constructor","type","size","annotation","duration","setAttribute","setType","ignore_ticks","clef_obj","Clef","clef","glyph","Glyph","code","point","setWidth","getMetrics","width","getClef","setContext","context","getBoundingBox","addToModifierContext","getCategory","preFormat","setPreFormatted","draw","stave","Vex","RERR","getContext","setRendered","abs_x","getAbsoluteX","setStave","setYShift","getYForLine","line","getYForGlyphs","renderToStave","undefined","attachment","setXShift","x_shift"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\n\n/** @constructor */\nexport class ClefNote extends Note {\n  static get CATEGORY() { return 'clefnote'; }\n\n  constructor(type, size, annotation) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'ClefNote');\n\n    this.setType(type, size, annotation);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getClef() {\n    return this.clef;\n  }\n\n  setContext(context) {\n    this.context = context;\n    this.glyph.setContext(this.context);\n    return this;\n  }\n\n  getBoundingBox() {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  getCategory() { return ClefNote.CATEGORY; }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.context);\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setYShift(\n      this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.context);\n      }\n      attachment.setStave(this.stave);\n      attachment.setYShift(\n        this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n"],"file":"clefnote.js"}