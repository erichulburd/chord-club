{"version":3,"sources":["../../../node_modules/vexflow/src/tremolo.js"],"names":["Tremolo","Modifier","CATEGORY","constructor","num","setAttribute","note","index","position","Position","CENTER","code","getCategory","draw","checkContext","Vex","RERR","setRendered","stemDirection","getStemDirection","start","getModifierStartXY","x","isGraceNote","scale","GraceNote","SCALE","category","y_spacing","musicFont","lookupMetric","height","y","stem","getExtents","baseY","font","family","size","weight","render_options","font_scale","stroke_px","stroke_spacing","Stem","UP","i","Glyph","renderGlyph","context"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n//\n// This class implements tremolo notation.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Stem } from './stem';\n\nexport class Tremolo extends Modifier {\n  static get CATEGORY() { return 'tremolo'; }\n\n  constructor(num) {\n    super();\n    this.setAttribute('type', 'Tremolo');\n\n    this.num = num;\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'tremolo1';\n  }\n\n  getCategory() { return Tremolo.CATEGORY; }\n\n  draw() {\n    this.checkContext();\n\n    if (!(this.note && this.index != null)) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Tremolo without a note and index.\");\n    }\n\n    this.setRendered();\n    const stemDirection = this.note.getStemDirection();\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n    const isGraceNote =  this.note.getCategory() === 'gracenotes';\n    const scale = isGraceNote ? GraceNote.SCALE : 1;\n    const category = `tremolo.${isGraceNote ? 'grace' : 'default'}`;\n\n    this.y_spacing = this.musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n    const height = this.num * this.y_spacing;\n    let y = this.note.stem.getExtents().baseY - height;\n\n    if (stemDirection < 0) {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n    } else {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n    }\n\n    this.font = {\n      family: 'Arial',\n      size: 16 * scale,\n      weight: '',\n    };\n\n    this.render_options = {\n      font_scale: this.musicFont.lookupMetric(`${category}.point`),\n      stroke_px: 3,\n      stroke_spacing: 10 * scale,\n    };\n\n    x += this.musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(this.context, x, y, this.render_options.font_scale, this.code, { category });\n      y += this.y_spacing;\n    }\n  }\n}\n"],"file":"tremolo.js"}