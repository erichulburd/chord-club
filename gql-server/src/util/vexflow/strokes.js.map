{"version":3,"sources":["../../../node_modules/vexflow/src/strokes.js"],"names":["Stroke","Modifier","CATEGORY","Type","BRUSH_DOWN","BRUSH_UP","ROLL_DOWN","ROLL_UP","RASQUEDO_DOWN","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","format","strokes","state","left_shift","stroke_spacing","length","strokeList","map","stroke","note","getNote","StaveNote","line","getKeyProps","getIndex","shift","getLeftDisplacedHeadPx","str","string","getPositions","strokeShift","xShift","reduce","setXShift","Math","max","getWidth","constructor","type","options","setAttribute","Vex","Merge","all_voices","note_end","index","position","Position","LEFT","render_options","font_scale","stroke_px","font","family","size","weight","setWidth","getCategory","getPosition","addEndNote","draw","checkContext","setRendered","RERR","start","getModifierStartXY","ys","getYs","topY","y","botY","x","line_space","stave","spacing_between_lines_px","notes","getModifierContext","getModifiers","i","n","Min","Max","arrow","arrow_shift_x","arrow_y","text_shift_x","text_y","x_shift","strokeLine","context","fillRect","Glyph","renderGlyph","category","save","setFont","fillText","restore"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\nexport class Stroke extends Modifier {\n  static get CATEGORY() { return 'strokes'; }\n  static get Type() {\n    return {\n      BRUSH_DOWN: 1,\n      BRUSH_UP: 2,\n      ROLL_DOWN: 3, // Arpeggiated chord\n      ROLL_UP: 4,   // Arpeggiated chord\n      RASQUEDO_DOWN: 5,\n      RASQUEDO_UP: 6,\n      ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n    };\n  }\n\n  // Arrange strokes inside `ModifierContext`\n  static format(strokes, state) {\n    const left_shift = state.left_shift;\n    const stroke_spacing = 0;\n\n    if (!strokes || strokes.length === 0) return this;\n\n    const strokeList = strokes.map((stroke) => {\n      const note = stroke.getNote();\n      if (note instanceof StaveNote) {\n        const { line } = note.getKeyProps()[stroke.getIndex()];\n        const shift = note.getLeftDisplacedHeadPx();\n        return { line, shift, stroke };\n      } else {\n        const { str: string } = note.getPositions()[stroke.getIndex()];\n        return { line: string, shift: 0, stroke };\n      }\n    });\n\n    const strokeShift = left_shift;\n\n    // There can only be one stroke .. if more than one, they overlay each other\n    const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n      stroke.setXShift(strokeShift + shift);\n      return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n    }, 0);\n\n    state.left_shift += xShift;\n    return true;\n  }\n\n  constructor(type, options) {\n    super();\n    this.setAttribute('type', 'Stroke');\n\n    this.note = null;\n    this.options = Vex.Merge({}, options);\n\n    // multi voice - span stroke across all voices if true\n    this.all_voices = 'all_voices' in this.options ? this.options.all_voices : true;\n\n    // multi voice - end note of stroke, set in draw()\n    this.note_end = null;\n    this.index = null;\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      font_scale: 38,\n      stroke_px: 3,\n      stroke_spacing: 10,\n    };\n\n    this.font = {\n      family: 'serif',\n      size: 10,\n      weight: 'bold italic',\n    };\n\n    this.setXShift(0);\n    this.setWidth(10);\n  }\n\n  getCategory() { return Stroke.CATEGORY; }\n  getPosition() { return this.position; }\n  addEndNote(note) { this.note_end = note; return this; }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    if (!(this.note && (this.index != null))) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw stroke without a note and index.\");\n    }\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let ys = this.note.getYs();\n    let topY = start.y;\n    let botY = start.y;\n    const x = start.x - 5;\n    const line_space = this.note.stave.options.spacing_between_lines_px;\n\n    const notes = this.getModifierContext().getModifiers(this.note.getCategory());\n    for (let i = 0; i < notes.length; i++) {\n      ys = notes[i].getYs();\n      for (let n = 0; n < ys.length; n++) {\n        if (this.note === notes[i] || this.all_voices) {\n          topY = Vex.Min(topY, ys[n]);\n          botY = Vex.Max(botY, ys[n]);\n        }\n      }\n    }\n\n    let arrow;\n    let arrow_shift_x;\n    let arrow_y;\n    let text_shift_x;\n    let text_y;\n\n    switch (this.type) {\n      case Stroke.Type.BRUSH_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        arrow_y = topY - (line_space / 2) + 10;\n        botY += (line_space / 2);\n        break;\n      case Stroke.Type.BRUSH_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = 0.5;\n        arrow_y = botY + (line_space / 2);\n        topY -= (line_space / 2);\n        break;\n      case Stroke.Type.ROLL_DOWN:\n      case Stroke.Type.RASQUEDO_DOWN:\n        arrow = 'arrowheadBlackUp';\n        arrow_shift_x = -3;\n        text_shift_x = this.x_shift + arrow_shift_x - 2;\n        if (this.note instanceof StaveNote) {\n          topY += 1.5 * line_space;\n          if ((botY - topY) % 2 !== 0) {\n            botY += 0.5 * line_space;\n          } else {\n            botY += line_space;\n          }\n          arrow_y = topY - line_space;\n          text_y = botY + line_space + 2;\n        } else {\n          topY += 1.5 * line_space;\n          botY += line_space;\n          arrow_y = topY - 0.75 * line_space;\n          text_y = botY + 0.25 * line_space;\n        }\n        break;\n      case Stroke.Type.ROLL_UP:\n      case Stroke.Type.RASQUEDO_UP:\n        arrow = 'arrowheadBlackDown';\n        arrow_shift_x = -4;\n        text_shift_x = this.x_shift + arrow_shift_x - 1;\n        if (this.note instanceof StaveNote) {\n          arrow_y = line_space / 2;\n          topY += 0.5 * line_space;\n          if ((botY - topY) % 2 === 0) {\n            botY += line_space / 2;\n          }\n          arrow_y = botY + 0.5 * line_space;\n          text_y = topY - 1.25 * line_space;\n        } else {\n          topY += 0.25 * line_space;\n          botY += 0.5 * line_space;\n          arrow_y = botY + 0.25 * line_space;\n          text_y = topY - line_space;\n        }\n        break;\n      case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n        topY += 0.5 * line_space;\n        botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n        break;\n      default:\n        throw new Vex.RERR('InvalidType', `The stroke type ${this.type} does not exist`);\n    }\n\n    let strokeLine = 'straight';\n    // Draw the stroke\n    if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n      this.context.fillRect(x + this.x_shift, topY, 1, botY - topY);\n    } else {\n      strokeLine = 'wiggly';\n      if (this.note instanceof StaveNote) {\n        for (let i = topY; i <= botY; i += line_space) {\n          Glyph.renderGlyph(\n            this.context,\n            x + this.x_shift - 4,\n            i,\n            this.render_options.font_scale,\n            'vexWiggleArpeggioUp'\n          );\n        }\n      } else {\n        let i;\n        for (i = topY; i <= botY; i += 10) {\n          Glyph.renderGlyph(\n            this.context,\n            x + this.x_shift - 4,\n            i,\n            this.render_options.font_scale,\n            'vexWiggleArpeggioUp'\n          );\n        }\n        if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n          text_y = i + 0.25 * line_space;\n        }\n      }\n    }\n\n    if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n      return; // skip drawing arrow heads or text\n    }\n\n    // Draw the arrow head\n    Glyph.renderGlyph(\n      this.context,\n      x + this.x_shift + arrow_shift_x,\n      arrow_y,\n      this.render_options.font_scale,\n      arrow,\n      { category: `stroke.${arrow}.${strokeLine}` }\n    );\n\n    // Draw the rasquedo \"R\"\n    if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n      this.context.save();\n      this.context.setFont(this.font.family, this.font.size, this.font.weight);\n      this.context.fillText('R', x + text_shift_x, text_y);\n      this.context.restore();\n    }\n  }\n}\n"],"file":"strokes.js"}