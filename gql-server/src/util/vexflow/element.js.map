{"version":3,"sources":["../../../node_modules/vexflow/src/element.js"],"names":["Element","newID","ID","constructor","type","attrs","id","el","classes","boundingBox","context","rendered","fontStack","Flow","DEFAULT_FONT_STACK","musicFont","Registry","getDefaultRegistry","register","setFontStack","getFontStack","setStyle","style","getStyle","applyStyle","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","className","addClass","registry","onUpdate","getAttribute","name","value","oldValue","removeClass","onRegister","isRendered","setRendered","getAttributes","setAttribute","getContext","setContext","getBoundingBox","Vex","RERR"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a generic base class for VexFlow, with implementations\n// of general functions and properties that can be inherited by all VexFlow elements.\n\nimport { Vex } from './vex';\nimport { Registry } from './registry';\nimport { Flow } from './tables';\n\nexport class Element {\n  static newID() { return 'auto' + (Element.ID++); }\n\n  constructor({ type } = {}) {\n    this.attrs = {\n      id: Element.newID(),\n      el: null,\n      type: type || 'Base',\n      classes: {},\n    };\n\n    this.boundingBox = null;\n    this.context = null;\n    this.rendered = false;\n    this.fontStack = Flow.DEFAULT_FONT_STACK;\n    this.musicFont = Flow.DEFAULT_FONT_STACK[0];\n\n    // If a default registry exist, then register with it right away.\n    if (Registry.getDefaultRegistry()) {\n      Registry.getDefaultRegistry().register(this);\n    }\n  }\n\n  // set music font\n  setFontStack(fontStack) {\n    this.fontStack = fontStack;\n    this.musicFont = fontStack[0];\n    return this;\n  }\n  getFontStack() {\n    return this.fontStack;\n  }\n\n  // set the draw style of a stemmable note:\n  setStyle(style) { this.style = style; return this; }\n  getStyle() { return this.style; }\n\n  // Apply current style to Canvas `context`\n  applyStyle(context = this.context, style = this.getStyle()) {\n    if (!style) return this;\n\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  restoreStyle(context = this.context, style = this.getStyle()) {\n    if (!style) return this;\n    context.restore();\n    return this;\n  }\n\n  // draw with style of an element.\n  drawWithStyle() {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  }\n\n  // An element can have multiple class labels.\n  hasClass(className) { return (this.attrs.classes[className] === true); }\n  addClass(className) {\n    this.attrs.classes[className] = true;\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.getAttribute('id'),\n        name: 'class',\n        value: className,\n        oldValue: null,\n      });\n    }\n    return this;\n  }\n\n  removeClass(className) {\n    delete this.attrs.classes[className];\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.getAttribute('id'),\n        name: 'class',\n        value: null,\n        oldValue: className,\n      });\n    }\n    return this;\n  }\n\n  // This is called by the registry after the element is registered.\n  onRegister(registry) { this.registry = registry; return this; }\n  isRendered() { return this.rendered; }\n  setRendered(rendered = true) { this.rendered = rendered; return this; }\n\n  getAttributes() { return this.attrs; }\n  getAttribute(name) { return this.attrs[name]; }\n  setAttribute(name, value) {\n    const id = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n    if (this.registry) {\n      // Register with old id to support id changes.\n      this.registry.onUpdate({ id, name, value, oldValue });\n    }\n    return this;\n  }\n\n  getContext() { return this.context; }\n  setContext(context) { this.context = context; return this; }\n  getBoundingBox() { return this.boundingBox; }\n\n  // Validators\n  checkContext() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', 'No rendering context attached to instance');\n    }\n    return this.context;\n  }\n}\n\nElement.ID = 1000;\n"],"file":"element.js"}