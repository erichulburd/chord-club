{"version":3,"sources":["../../../node_modules/vexflow/src/tickable.js"],"names":["Tickable","Element","constructor","setAttribute","ticks","Fraction","intrinsicTicks","tickMultiplier","width","x_shift","voice","tickContext","modifierContext","modifiers","preFormatted","postFormatted","tuplet","tupletStack","align_center","center_x_shift","ignore_ticks","formatterMetrics","freedom","left","right","duration","iterations","space","used","mean","deviation","reset","getTicks","shouldIgnoreTicks","setWidth","getWidth","Vex","RERR","setXShift","x","getXShift","getX","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterAlignment","getVoice","setVoice","getTuplet","resetTuplet","noteCount","notesOccupied","i","indexOf","splice","getNoteCount","getNotesOccupied","applyTickMultiplier","length","pop","setTuplet","push","addToModifierContext","mc","addModifier","mod","getModifiers","setTickContext","tc","preFormat","postFormat","getIntrinsicTicks","setIntrinsicTicks","clone","multiply","getTickMultiplier","numerator","denominator","setDuration","Flow","RESOLUTION","value"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// The tickable interface. Tickables are things that sit on a score and\n// have a duration, i.e., they occupy space in the musical rendering dimension.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\n\nexport class Tickable extends Element {\n  constructor() {\n    super();\n    this.setAttribute('type', 'Tickable');\n\n    // These properties represent the duration of\n    // this tickable element.\n    this.ticks = new Fraction(0, 1); // Fractional value of ticks\n    this.intrinsicTicks = 0; // Floating point value of ticks\n    this.tickMultiplier = new Fraction(1, 1);\n\n    // Formatter metrics\n    this.width = 0;\n    this.x_shift = 0; // Shift from tick context\n\n    this.voice = null;\n    this.tickContext = null;\n    this.modifierContext = null;\n    this.modifiers = [];\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.tuplet = null;\n    this.tupletStack = [];\n\n    this.align_center = false;\n    this.center_x_shift = 0; // Shift from tick context if center aligned\n\n    // This flag tells the formatter to ignore this tickable during\n    // formatting and justification. It is set by tickables such as BarNote.\n    this.ignore_ticks = false;\n\n    // This is a space for an external formatting class or function to maintain\n    // metrics.\n    this.formatterMetrics = {\n      // The freedom of a tickable is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n\n      // The simplified rational duration of this tick as a string. It can be\n      // used as an index to a map or hashtable.\n      duration: '',\n\n      // The number of formatting iterations undergone.\n      iterations: 0,\n\n      // The space in pixels allocated by this formatter, along with the mean space\n      // for tickables of this duration, and the deviation from the mean.\n      space: {\n        used: 0,\n        mean: 0,\n        deviation: 0,\n      },\n    };\n  }\n\n  reset() { return this; }\n\n  getTicks() { return this.ticks; }\n  shouldIgnoreTicks() { return this.ignore_ticks; }\n\n  // Get and set width of note. Used by the formatter for positioning.\n  setWidth(width) { this.width = width; }\n  getWidth() {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n    }\n\n    return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n  }\n\n  // Displace note by `x` pixels. Used by the formatter.\n  setXShift(x) { this.x_shift = x; return this; }\n  getXShift() { return this.x_shift; }\n\n  // Get `X` position of this tick context.\n  getX() {\n    if (!this.tickContext) {\n      throw new Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');\n    }\n\n    return this.tickContext.getX() + this.x_shift;\n  }\n\n\n  getFormatterMetrics() { return this.formatterMetrics; }\n\n  getCenterXShift() {\n    if (this.isCenterAligned()) {\n      return this.center_x_shift;\n    }\n\n    return 0;\n  }\n  isCenterAligned() { return this.align_center; }\n  setCenterAlignment(align_center) {\n    this.align_center = align_center;\n    return this;\n  }\n\n  // Every tickable must be associated with a voice. This allows formatters\n  // and preFormatter to associate them with the right modifierContexts.\n  getVoice() {\n    if (!this.voice) throw new Vex.RERR('NoVoice', 'Tickable has no voice.');\n    return this.voice;\n  }\n  setVoice(voice) { this.voice = voice; }\n  getTuplet() { return this.tuplet; }\n\n  /*\n   * resetTuplet\n   * @param tuplet -- the specific tuplet to reset\n   *   if this is not provided, all tuplets are reset.\n   * @returns this\n   *\n   * Removes any prior tuplets from the tick calculation and\n   * resets the intrinsic tick value to\n   */\n  resetTuplet(tuplet) {\n    let noteCount;\n    let notesOccupied;\n    if (tuplet) {\n      const i = this.tupletStack.indexOf(tuplet);\n      if (i !== -1) {\n        this.tupletStack.splice(i, 1);\n        noteCount = tuplet.getNoteCount();\n        notesOccupied = tuplet.getNotesOccupied();\n\n        // Revert old multiplier by inverting numerator & denom.:\n        this.applyTickMultiplier(noteCount, notesOccupied);\n      }\n      return this;\n    }\n\n    while (this.tupletStack.length) {\n      tuplet = this.tupletStack.pop();\n      noteCount = tuplet.getNoteCount();\n      notesOccupied = tuplet.getNotesOccupied();\n\n      // Revert old multiplier by inverting numerator & denom.:\n      this.applyTickMultiplier(noteCount, notesOccupied);\n    }\n    return this;\n  }\n\n  setTuplet(tuplet) {\n    // Attach to new tuplet\n\n    if (tuplet) {\n      this.tupletStack.push(tuplet);\n\n      const noteCount = tuplet.getNoteCount();\n      const notesOccupied = tuplet.getNotesOccupied();\n\n      this.applyTickMultiplier(notesOccupied, noteCount);\n    }\n\n    this.tuplet = tuplet;\n\n    return this;\n  }\n\n  /** optional, if tickable has modifiers **/\n  addToModifierContext(mc) {\n    this.modifierContext = mc;\n    // Add modifiers to modifier context (if any)\n    this.preFormatted = false;\n  }\n\n  /** optional, if tickable has modifiers **/\n  addModifier(mod) {\n    this.modifiers.push(mod);\n    this.preFormatted = false;\n    return this;\n  }\n  getModifiers() {\n    return this.modifiers;\n  }\n  setTickContext(tc) {\n    this.tickContext = tc;\n    this.preFormatted = false;\n  }\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.width = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      this.width += this.modifierContext.getWidth();\n    }\n  }\n  postFormat() {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n  getIntrinsicTicks() {\n    return this.intrinsicTicks;\n  }\n  setIntrinsicTicks(intrinsicTicks) {\n    this.intrinsicTicks = intrinsicTicks;\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n  getTickMultiplier() {\n    return this.tickMultiplier;\n  }\n  applyTickMultiplier(numerator, denominator) {\n    this.tickMultiplier.multiply(numerator, denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n  setDuration(duration) {\n    const ticks = duration.numerator * (Flow.RESOLUTION / duration.denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(ticks);\n    this.intrinsicTicks = this.ticks.value();\n  }\n}\n"],"file":"tickable.js"}