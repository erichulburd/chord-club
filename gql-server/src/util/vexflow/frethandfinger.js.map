{"version":3,"sources":["../../../node_modules/vexflow/src/frethandfinger.js"],"names":["FretHandFinger","Modifier","CATEGORY","format","nums","state","left_shift","right_shift","num_spacing","length","nums_list","prev_note","shiftLeft","shiftRight","i","num","note","getNote","pos","getPosition","props","getKeyProps","getIndex","n","keys","Math","max","getLeftDisplacedHeadPx","getRightDisplacedHeadPx","push","line","shiftL","shiftR","sort","a","b","numShiftL","numShiftR","xWidthL","xWidthR","lastLine","lastNote","num_shift","numWidth","getWidth","Position","LEFT","setXShift","RIGHT","constructor","number","setAttribute","index","finger","width","position","x_shift","y_shift","x_offset","y_offset","font","family","size","weight","getCategory","setFretHandFinger","setOffsetX","x","setOffsetY","y","draw","checkContext","Vex","RERR","setRendered","ctx","context","start","getModifierStartXY","dot_x","dot_y","ABOVE","BELOW","save","setFont","fillText","restore"],"mappings":"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","sourcesContent":["// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\n\n/**\n * @constructor\n */\nexport class FretHandFinger extends Modifier {\n  static get CATEGORY() { return 'frethandfinger'; }\n\n  // Arrange fingerings inside a ModifierContext.\n  static format(nums, state) {\n    const { left_shift, right_shift } = state;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shiftLeft = 0;\n    let shiftRight = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n      const props = note.getKeyProps()[num.getIndex()];\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          if (left_shift === 0) {\n            shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n          }\n          if (right_shift === 0) {\n            shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        note,\n        num,\n        pos,\n        line: props.line,\n        shiftL: shiftLeft,\n        shiftR: shiftRight,\n      });\n    }\n\n    // Sort fingernumbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let numShiftL = 0;\n    let numShiftR = 0;\n    let xWidthL = 0;\n    let xWidthR = 0;\n    let lastLine = null;\n    let lastNote = null;\n\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n\n      // Reset the position of the string number every line.\n      if (line !== lastLine || note !== lastNote) {\n        numShiftL = left_shift + shiftL;\n        numShiftR = right_shift + shiftR;\n      }\n\n      const numWidth = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift + numShiftL);\n        num_shift = left_shift + numWidth; // spacing\n        xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(numShiftR);\n        num_shift = shiftRight + numWidth; // spacing\n        xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n      }\n      lastLine = line;\n      lastNote = note;\n    }\n\n    state.left_shift += xWidthL;\n    state.right_shift += xWidthR;\n\n    return true;\n  }\n\n  constructor(number) {\n    super();\n    this.setAttribute('type', 'FretHandFinger');\n\n    this.note = null;\n    this.index = null;\n    this.finger = number;\n    this.width = 7;\n    this.position = Modifier.Position.LEFT;  // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0;       // Horizontal offset from default\n    this.y_offset = 0;       // Vertical offset from default\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n  getCategory() { return FretHandFinger.CATEGORY; }\n  setFretHandFinger(number) { this.finger = number; return this; }\n  setOffsetX(x) { this.x_offset = x; return this; }\n  setOffsetY(y) { this.y_offset = y; return this; }\n\n  draw() {\n    this.checkContext();\n\n    if (!this.note || this.index == null) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw string number without a note and index.\");\n    }\n\n    this.setRendered();\n    const ctx = this.context;\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset + 5;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n        dot_x -= 4;\n        dot_y -= 12;\n        break;\n      case Modifier.Position.BELOW:\n        dot_x -= 2;\n        dot_y += 10;\n        break;\n      case Modifier.Position.LEFT:\n        dot_x -= this.width;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += 1;\n        break;\n      default:\n        throw new Vex.RERR('InvalidPostion', `The position ${this.position} does not exist`);\n    }\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText('' + this.finger, dot_x, dot_y);\n    ctx.restore();\n  }\n}\n"],"file":"frethandfinger.js"}