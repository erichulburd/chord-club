scalar ConstraintString
scalar ConstraintNumber

scalar JSON
scalar JSONObject

directive @constraint(
  # String constraints
  minLength: Int
  maxLength: Int
  startsWith: String
  endsWith: String
  notContains: String
  pattern: String
  format: String

  # Number constraints
  min: Int
  max: Int
  exclusiveMin: Int
  exclusiveMax: Int
  multipleOf: Int
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

enum TagType {
  DESCRIPTOR,
  LIST,
}

interface TagBase {
  displayName: String!
  tagType: TagType!
}

type Tag implements TagBase {
  id: Int!
  munge: String!
  displayName: String!
  createdBy: String!
  createdAt: String!
  password: String!
  tagType: TagType!
  tagPosition: Int
}

input TagNew {
  displayName: String!
  tagType: TagType!
}

enum TagQueryOrder {
  DISPLAY_NAME,
  CREATED_AT,
}

input TagQuery {
  displayName: String
  createdBy: String
  ids: [Int!]
  tagTypes: [TagType!]!
  order: TagQueryOrder
  asc: Boolean
  after: Int
  limit: Int
}

enum ReactionType {
  STAR,
  FLAG,
}

type Reaction {
  chartID: Int!
  reactionType: ReactionType!
  createdBy: String!
  createdAt: String!
}

input ReactionNew {
  chartID: Int!
  uid: String!
  reactionType: ReactionType!
}

enum ChartType {
  CHORD,
  PROGRESSION,
}

interface ChartBase {
  audioURL: String!
  audioLength: Int!
  hint: String
  name: String
  description: String
  abc: String!
  tags: [Tag!]!
  chartType: ChartType!
  bassNote: Note
  root: Note
  quality: ChartQuality!
  extensions: [Extension!]
}

type ReactionCounts {
  stars: Int!
  flags: Int!
}

type Chart implements ChartBase {
  id: Int!
  audioURL: String!
  audioLength: Int!
  imageURL: String
  hint: String
  name: String
  description: String
  abc: String!
  tags: [Tag!]!
  chartType: ChartType!
  bassNote: Note
  root: Note
  quality: ChartQuality!
  createdAt: String!
  createdBy: String!
  updatedAt: String
  creator: User
  extensions: [Extension!]
  reactionCounts: ReactionCounts!
  userReactionType: ReactionType
}

input ChartNew {
  audioURL: String!
  audioLength: Int!
  imageURL: String
  hint: String
  name: String
  description: String
  abc: String!
  chartType: ChartType!
  bassNote: Note
  root: Note
  quality: ChartQuality
  extensionIDs: [Int!]
  tags: [TagNew!]!
}

enum Note {
  C, D, E, F, G, A, B,
  Cb, Db, Eb, Fb, Gb, Ab, Bb,
  Cs, Ds, Es, Fs, Gs, As, Bs,
}

enum ChartQuality {
  MAJOR,
  MINOR,
  SUS2,
  SUS4,
  DIMINISHED,
  AUGMENTED,
}

enum ExtensionType {
  SHARP,
  FLAT,
  PLAIN,
}

type ExtensionNew {
  extensionType: ExtensionType!
  degree: Int! @constraint(min: 2, max: 13)
}

type Extension {
  id: Int!
  extensionType: ExtensionType!
  degree: Int! @constraint(min: 2, max: 13)
}

input ChartUpdate {
  id: Int!
  audioURL: String
  audioLength: Int
  bassNote: Note
  root: Note
  quality: ChartQuality
  hint: String
  name: String
  description: String
  abc: String
  imageURL: String
  extensionIDs: [Int!]
  tags: [TagNew!]
}

enum ChartQueryOrder {
  THUMBS_UP,
  CREATED_AT,
  TAG_POSITION,
  RANDOM,
}

input ChartQuery {
  id: Int
  tagIDs: [Int!]
  chartTypes: [ChartType!]!
  after: Int
  order: ChartQueryOrder
  asc: Boolean
  limit: Int
}

interface UserBase {
  username: String!
}

type User implements UserBase {
  uid: String!
  username: String!
  createdAt: String!
  settings: JSONObject!
}

input UserNew {
  username: String!
}

input UserUpdate {
  username: String!
  settings: JSONObject
}

enum UserQueryOrder {
  CREATED_BY,
  USERNAME,
}

input UserQuery {
  uid: String
  username: String
  after: String
  order: UserQueryOrder
  asc: Boolean
  limit: Int
}

enum ErrorType {
  # Apollo https://www.apollographql.com/docs/apollo-server/data/errors/#codes
  UNAUTHENTICATED,
  # custom
  CHART_NOT_FOUND,
  INVALID_CHART_TAG_ERROR,
  INVALID_CHART_REACTION,
  INVALID_TAG_POSITION_UPDATE,
  DUPLICATE_USERNAME,
  UNHANDLED,
  INTERNAL_SERVER_ERROR,
  FORBIDDEN_RESOURCE_OPERATION,
  INVALID_INVITATION_TOKEN,
  NOT_FOUND,
}

type ErrorException {
  stacktrace: [String!]
}

type ErrorExtensions {
  msgArgs: [String!]
  code: ErrorType!
  exception: ErrorException
}

enum PolicyResourceType {
  TAG
}

enum PolicyAction {
  WILDCARD
  READ
  WRITE
}

input PolicyResource {
  resourceType: PolicyResourceType!
  resourceID: Int!
}

type Policy {
  id: Int!
  resourceType: PolicyResourceType!
  resourceID: Int!
  invitationID: Int
  action: PolicyAction!
  uid: String!
  user: User
  expiresAt: String
  createdAt: String!
}

input NewPolicy {
  resourceType: PolicyResourceType!
  resourceID: Int!
  action: PolicyAction!
  uid: String!
  expiresAt: String
  createdAt: String
  createdBy: String
}

input PolicyQuery {
  resource: PolicyResource!
}

type Invitation {
  id: Int!
  resourceType: PolicyResourceType!
  resourceID: Int!
  action: PolicyAction!
  expiresAt: String
  createdAt: String
  createdBy: String
}

input NewInvitation {
  resourceType: PolicyResourceType!
  resourceID: Int!
  action: PolicyAction!
  expiresAt: String
}

input InvitationQuery {
  resource: PolicyResource!
}

type Empty {
  empty: Boolean
}

type Query {
  me: User!
  users(query: UserQuery!): [User!]!
  charts(query: ChartQuery!): [Chart!]!
  tags(query: TagQuery!): [Tag!]!
  extensions: [Extension!]!

  invitations(query: InvitationQuery): [Invitation!]!
  policies(query: PolicyQuery!): [Policy!]!
}

type CreateInvitationResponse {
  token: String!
}

type Mutation {
  createUser(newUser: UserNew!): User
  updateUser(userUpdate: UserUpdate!): User
  deleteUser: Empty
  react(reactionNew: ReactionNew): Chart
  createChart(chartNew: ChartNew!): Chart
  updateChart(chartUpdate: ChartUpdate!): Chart
  deleteChart(chartID: Int!): Empty
  addExtensions(chartID: Int!, extensionIDs: [Int!]!): Chart
  removeExtensions(chartID: Int!, extensionIDs: [Int!]!): Chart
  createTags(tagNews: [TagNew!]!): [Tag!]!
  deleteTag(tagID: Int!): Empty
  addTags(chartID: Int!, tags: [TagNew!]!): Chart
  unTag(chartID: Int!, tagIDs: [Int!]!): Chart
  setTagPositions(tagID: Int!, chartIDs: [Int!]!, positions: [Int!]!): [Chart]

  # Invitations
  createInvitation(invitation: NewInvitation!, tokenExpirationHours: Int): CreateInvitationResponse!
  deleteInvitation(invitationID: Int!): Empty
  acceptInvitation(token: String!): Empty

  # Policies
  createPolicy(policy: NewPolicy!): Policy
  deletePolicy(policyID: Int!): Empty
}
